comment: The Leaflet Shared Component. Use this component to add OpenStreetMaps maps to you applications.
scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_CompImport*/
        import ''leaflet-defaulticon-compatibility'';
        /*End_c8o_CompImport*/
        /*Begin_c8o_CompDeclaration*/
        	public options: any = {
        		zoom: 7,
        		center: L.latLng(this.center.lat, this.center.lng)
        	};
        	public leafLayers: any = [];
        	public map: L.Map;
        	/*End_c8o_CompDeclaration*/
        /*Begin_c8o_CompConstructor*/
        		/*End_c8o_CompConstructor*/
        /*Begin_c8o_CompInitialization*/
        		
        		this.options = {
        				zoom: this.zoom,
        				center: this.center?
        					L.latLng(this.center.lat, this.center.lng) : 
        					{ lat: 46.879966, lng: -121.726909}
        		};
        		/*End_c8o_CompInitialization*/
        /*Begin_c8o_CompFinalization*/
        		/*End_c8o_CompFinalization*/
        /*Begin_c8o_CompChanges*/
        		if(this.layers != null){
        			for (let layer of this.layers) {
        				this.leafLayers.push(L.tileLayer(layer.source, layer.options));
        			}
        		}
        		if(this.markers != null){
        			for (let marker of this.markers) {
        				let m = L.marker(L.latLng(marker.lat, marker.lng), marker.options);
        				if (marker.tooltip) {
        					m.bindTooltip(marker.tooltip);
        				}
        				if (marker.popup) {
        					m.bindPopup(marker.popup); 
        				}
        				this.leafLayers.push(m);
        			}
        		}
        		if(this.circles != null){
        			for (let circle of this.circles) {
        				let c = L.circle(L.latLng(circle.lat, circle.lng), circle.radius);
        				if (circle.tooltip) {
        					c.bindTooltip(circle.tooltip);
        				}
        				if (circle.popup) {
        					c.bindPopup(circle.popup);
        
        				}
        				this.leafLayers.push(c);
        			}
        		}		
        		if(this.polygons != null){
        			for (let polygon of this.polygons) {
        				let p = L.polygon(polygon.coord);
        				if (polygon.tooltip) {
        					p.bindTooltip(polygon.tooltip);
        				}
        				if (polygon.popup) {
        					p.bindPopup(polygon.popup);
        
        				}
        				this.leafLayers.push(p);
        			}
        		}
        		
        		/*End_c8o_CompChanges*/
        /*Begin_c8o_CompDoCheck*/
        		/*End_c8o_CompDoCheck*/
        /*Begin_c8o_CompAfterContentInit*/
        		/*End_c8o_CompAfterContentInit*/
        /*Begin_c8o_CompAfterContentChecked*/
        		/*End_c8o_CompAfterContentChecked*/
        /*Begin_c8o_CompAfterViewInit*/
        		/*End_c8o_CompAfterViewInit*/
        /*Begin_c8o_CompAfterViewChecked*/
        		/*End_c8o_CompAfterViewChecked*/
        /*Begin_c8o_CompFunction*/
        	onMapReady(map: L.Map) {
        		this.map = map;
        		setTimeout(() => {
        			if (this.autoCenter) {
        				window.navigator.geolocation.getCurrentPosition((position) => {
        					this.options.center = L.latLng(position.coords.latitude, position.coords.longitude);
        					map.setView(this.options.center, this.zoom);
        					this.c8o.log.warn("centered on current position", this.options.center);
        					this.GpsCentered.emit(this.options.center);
        				}, (error) => {
        					this.c8o.log.error(''Error getting location''+ error.message);
        				}, {
        					enableHighAccuracy: true,
        					timeout: 5000,
        					maximumAge: 300
        				});
        		    }
        			map.invalidateSize();
        			this.MapReady.emit(map);
        		}, 200);
        		
        		if (this.geoCodeSearchAddress) {
        			const provider = new OpenStreetMapProvider();
        			
        			let searchControl = new (GeoSearch as any).GeoSearchControl({
        				provider: provider,
        				style: ''bar'',
        				//autoClose: true,
        				searchLabel: this.searchLabel,
        				showMarker: true,
        				showPopup: true,
        				autoComplete: true,
        				autoCompleteDelay: 250,
        				autoCompleteMinLength: 3,
        				autoCompletePosition: ''bottomautoComplete'',
        				autoCompleteCallback: (results) => {
        					if (results.length > 0) {
        						this.centerChange.emit(L.latLng(results[0].y, results[0].x));
        					}
        				}
        			});
        			
        			this.map.addControl(searchControl);
        		}
        		if(this.disabled){
        			this.disableInteractions();
        		}
        		
        	}
        	private disableInteractions(): void {
        	    this.map.dragging.disable();
        	    this.map.touchZoom.disable();
        	    this.map.doubleClickZoom.disable();
        	    this.map.scrollWheelZoom.disable();
        	    this.map.boxZoom.disable();
        	    this.map.keyboard.disable();
        
        	    if (this.map.tap){
        			this.map.tap.disable();
        		} 
        	  }
        	/*End_c8o_CompFunction*/
        '
↓SharedComponent_Event [ngx.components.UISharedComponentEvent-1713370796992]: 
  ↓InstallLeaflet [ngx.components.UICustomAction-1713370819120]: 
    build_styles: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: ./node_modules/leaflet/dist/leaflet.css
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: ./node_modules/leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.css
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: ./node_modules/leaflet-geosearch/dist/geosearch.css
    cordova_plugins: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: cordova-plugin-geolocation
              - java.lang.String: 
                - ↑value: 5.0.0
              - java.lang.String: 
                - ↑value: '{}'
    module_ng_imports: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: LeafletModule
    module_ts_imports: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: LeafletModule
              - java.lang.String: 
                - ↑value: '@bluehalo/ngx-leaflet'
              - java.lang.String: 
                - ↑value: false
    package_dependencies: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: leaflet
              - java.lang.String: 
                - ↑value: 1.9.4
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: '@bluehalo/ngx-leaflet'
              - java.lang.String: 
                - ↑value: 19.0.0
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: '@types/leaflet'
              - java.lang.String: 
                - ↑value: 1.9.11
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: leaflet-defaulticon-compatibility
              - java.lang.String: 
                - ↑value: 0.1.2
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: leaflet-geosearch
              - java.lang.String: 
                - ↑value: 3.11.1
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: '@types/google.maps'
              - java.lang.String: 
                - ↑value: 3.55.7
    page_ts_imports: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: '* as L'
              - java.lang.String: 
                - ↑value: leaflet
              - java.lang.String: 
                - ↑value: false
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: OpenStreetMapProvider
              - java.lang.String: 
                - ↑value: leaflet-geosearch
              - java.lang.String: 
                - ↑value: false
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: '* as GeoSearch'
              - java.lang.String: 
                - ↑value: leaflet-geosearch
              - java.lang.String: 
                - ↑value: false
↓Div [ngx.components.UIDynamicElement-1713371234456]: 
  beanData: '{"ionBean":"DivTag"}'
  tagName: div
  ↓Attr [ngx.components.UIAttribute-1713371274745]: 
    attrName: 
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: plain:leaflet
  ↓_leafletOptions_ [ngx.components.UIAttribute-1713371300601]: 
    attrName: '[leafletOptions]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.options
  ↓Style [ngx.components.UIStyle-1713371339052]: 
    styleContent: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '	height: 100%;
            	input{
            		background-color: white !important;
            	}
            	.glass{
            		background-color: white !important;
            	}
            	.leaflet-geosearch-bar input {
            		background-color: white !important;
            	}
            '
  ↓_leafletOptions_1 [ngx.components.UIAttribute-1713373442313]: 
    attrName: '[leafletLayers]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.leafLayers
  ↓_leafletOptions_2 [ngx.components.UIAttribute-1713374399858]: 
    attrName: (leafletMapReady)
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:onMapReady($event)
  ↓Attr1 [ngx.components.UIAttribute-1734448811418]: 
    attrName: '[style.min-height]'
    attrValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: source:{"filter":"Shared","project":"lib_Leaflet","input":"","model":{"data":[{"priority":1713370776918,"regular":true}],"path":"?.minHeight","prefix":"","suffix":"","custom":"","useCustom":false}}
↓center [ngx.components.UICompVariable-1713371397632]: 
  comment: |
    'The map will be centered on this coordinates described by this object
    <code>
    { lat: 46.879966, lng: -121.726909}
    </code>
    '
  value: '{ lat: 46.879966, lng: -121.726909}'
↓layers [ngx.components.UICompVariable-1713371555815]: 
  comment: |
    'The maps will display layers coming for data sources. You can give the layer information here by using an array of objects such as :
    <code>
    [
    	// layer #1
    	{
    		name: ''OpenStreetMap'',											// Name of the layer source
    		source: ''https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'',	// Layer url pattern (here To feed the layer from Open 																											// Street Maps)
    		options: {														// Layer options
    			maxZoom: 18,
    			attribution: ''...'' 
    		}
    	},
    	// Layer #2
    	...
    ]
    </code>
    
    You can add as many layers you want.'
  value: '[{name: ''OpenStreetMap'', source: ''https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'', options: { maxZoom: 18, attribution: ''...'' }}]'
↓markers [ngx.components.UICompVariable-1713374630305]: 
  comment: |
    'Add Markers on the maps using an array of Objects :
    <code>
    [
    	// Marker #1
    	{
    		lat: 46.879966,			// lat of marker
    		lng: -121.726909,		// lng of Marker
    		options: {
    			title: ''here''		// All the marker options you can find at https://leafletjs.com/reference.html#marker
    		},
    		tooltip: ''I am Here'',	// The tooltip on the marker
    		popup: ''I am Here''		// a Popup displayed over the marker
    	},
    	// Marker #2
    	...
    ]
    </code>
    
    '
  value: '[{ lat: 46.879966, lng: -121.726909, options: {title: ''here''}, tooltip: ''I am Here'', popup: ''I am Here''}]'
↓circles [ngx.components.UICompVariable-1713375760411]: 
  comment: |
    'Add Circles on the map using an array of objects :
    <code>
    [
    	// Circle #1
    	{
    		lat: 46.879966,		// lat of the circle center
    		lng: -121.726909,	// lng of the circle center
    		radius: 5000			// Circle radius
    	},
    	// Circle #2
    	...
    ]
    </code>
    You can add as many circles you want in the array.
    '
  value: '[{lat: 46.879966, lng: -121.726909,  radius: 5000}]'
↓polygons [ngx.components.UICompVariable-1713434276105]: 
  comment: |
    'Add polygons to the maps using an Array of objects :
    <code>
    [
    	// Polygon #1
    	[
    		[ 46.8, -121.85 ],		// Latlng segment #1
    		[ 46.92, -121.92 ],		// Latlng segment #2
    		[ 46.87, -121.8 ]		// Latlng segment #3
    	],
    	// Polygon #2
    	...
    ]
    </code>
    '
  value: '[{coord: [[ 46.8, -121.85 ], [ 46.92, -121.92 ], [ 46.87, -121.8 ]]}]'
↓zoom [ngx.components.UICompVariable-1713452238832]: 
  comment: Zoom factor
  value: 12
↓autoCenter [ngx.components.UICompVariable-1713535572596]: 
  comment: If true the map will automatically be centered on current users GPS position
  value: true
↓MapReady [ngx.components.UICompEvent-1713595438779]: 
  attrName: MapReady
  comment: |
    This event will be emitted when the map is ready and displayed. The (map) will hold a reference to the underlying leaflet map object so you can use the leaflet Api to interact with it.
    
    
↓GpsCentered [ngx.components.UICompEvent-1713635956590]: 
  attrName: GpsCentered
  comment: |
    'This event will be emitted when the GPS has be acquired and the map centered on the current GPS position. The parent.out will hold a 
    <code>
    {
    	lat: nnn,
    	lng: mmm
    }
    </code>
    Object holding the acquired GPS position.
    
    '
↓geoCodeSearchAddress [ngx.components.UICompVariable-1713798611726]: 
  comment: If true the a search box will be displayed at the top of the map to enable users to search for addresses.
  value: true
↓minHeight [ngx.components.UICompVariable-1734448838932]: 
  comment: If true the map will automatically be centered on current users GPS position
  value: '''initial'''
↓disabled [ngx.components.UICompVariable-1736443901659]: 
  comment: If true the map will automatically be centered on current users GPS position
  value: false
↓searchLabel [ngx.components.UICompVariable-1736506138195]: 
  value: '''Search'''